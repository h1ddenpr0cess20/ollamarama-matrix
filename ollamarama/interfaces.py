from __future__ import annotations

from typing import Any, Dict, List, Optional, Protocol, Awaitable, Callable


class OllamaClientProtocol(Protocol):
    def chat(
        self,
        messages: List[Dict[str, str]],
        model: str,
        options: Optional[Dict[str, Any]] = None,
        timeout: Optional[int] = None,
        stream: bool = False,
    ) -> Dict[str, Any]:
        ...

    def health(self) -> bool:
        ...


class MatrixClientProtocol(Protocol):
    async def login(self) -> Any: ...
    async def ensure_keys(self) -> None: ...
    async def load_store(self) -> None: ...
    async def join(self, room_id: str) -> None: ...
    async def send_text(self, room_id: str, body: str, html: Optional[str] = None) -> None: ...
    async def display_name(self, user_id: str) -> str: ...
    def add_text_handler(self, handler: Callable[[Any, Any], Awaitable[None]]) -> None: ...
    def add_to_device_callback(self, callback, event_types=None) -> None: ...
    async def initial_sync(self, timeout_ms: int = 3000) -> None: ...
    async def sync_forever(self, timeout_ms: int = 30000) -> None: ...


class HistoryStoreProtocol(Protocol):
    def init_prompt(self, room: str, user: str, persona: Optional[str] = None, custom: Optional[str] = None) -> None: ...
    def add(self, room: str, user: str, role: str, content: str) -> None: ...
    def get(self, room: str, user: str) -> List[Dict[str, str]]: ...
    def reset(self, room: str, user: str, stock: bool = False) -> None: ...
    def clear_all(self) -> None: ...

